\section{Related Research\label{sec:related-work}}
  FRNNs searches are most often found within agent-based models, they have also been used alongside similar algorithms within the fields of \gls{sph} and collision detection. FRNNs is the process whereby each agent considers the properties of every other agent located within a radial area about their location. This searched area can be considered the agentâ€™s neighbourhood and must be searched every timestep of a simulation to ensure agents have live information. Whilst various spatial data-structures such as kd-trees and R-trees are capable of providing efficient access to spatial neighbourhoods, their expensive constructions however, make them unsuitable for the large dynamic agent populations found within agent-based models.
The naive technique for carrying out a neighbourhood search is via a brute-
force technique, individually considering whether each agent is located within the
target neighbourhood. This technique may be suitable for small agent popula-
tions, however the overhead quickly becomes significant as agent populations in-
crease, reducing the proportional size of the neighbourhoods.
    %Microbenchmarking is also found within the \gls{hpc} community. High precision timings are collected of the repeated execution of a single operation, exposing execution costs of individual instructions and cache accesses. This work has been carried out surveying \glspl{gpu} by both Wong et al\cite{WP*10}; and Volkov and Demel\cite{VD08}, similarly Liu et al have used microbenchmarking to compare the performance within compute clusters\cite{LC*04}. Microbenchmarking primarily provides a greater understanding of architectural timings, however the lessons learned can be applied when designing \gls{hpc} algorithms. This does however make microbenchmarking unsuitable for comparing the implementations presented within this paper.